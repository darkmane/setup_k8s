---
- hosts: control_plane
  become: true
  tasks:
  # Step 2.1: Install Docker and its dependent components.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
# Step 2.2: Kubelet will not start if the system has swap enabled, 
# so we are disabling swap using the below code.
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
# Step 2.3: Installing kubelet, kubeadm and kubectl using the below code.
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
# Step 2.4: Initialize the Kubernetes cluster with kubeadm using the 
# below code (applicable only on the control plane).
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans={{ node_ip }} --pod-network-cidr 10.244.0.0/16
# Step 2.5: Setup the kube config file for the user to access the Kubernetes cluster using the below code.
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
    - mkdir -p $USER/.kube
    - cp -i /etc/kubernetes/admin.conf $USER/.kube/config
    - chown $USER:$USER $USER/.kube/config
# Step 2.6: Setup the container networking provider and the network policy engine using the below code.
  - name: Install calico pod network
    become: false
    command: curl -sSL https://rawgit.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml | sed "s/amd64/arm/g" | kubectl create -f -
# Step 2.7: Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command.
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command
  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  - name: Copy kubectl file to local-box
    fetch:
      src: /etc/kubernetes/admin.conf
      dest: ./kubectl_config
# Step 2.8: Setup a handler for checking Docker daemon using the below code.
  handlers:
    - name: docker status
      service: name=docker state=started
